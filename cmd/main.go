package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/gorilla/mux"
	"github.com/jmoiron/sqlx"
	"github.com/ts.tarusov/swp/internal/dbmodels"
	"github.com/ts.tarusov/swp/internal/handlers"

	_ "github.com/ts.tarusov/swp/docs" // docs is generated by Swag CLI, you have to import it.

	httpSwagger "github.com/swaggo/http-swagger"
)

// @title SWP API
// @version 1.0
// @description Модель расчета стратегического планирования персонала
// @contact.name Timofey Tarusov
// @contact.email ts.tarusov@stalcom.com
// @host localhost:5000
// @BasePath /
func main() {
	service := handlers.NewService(log.New(os.Stdout, "", log.Flags()))
	service.Info("Connecting")
	db, err := sqlx.Connect(dbmodels.DriverName, dbmodels.HdbDsn())
	if err != nil {
		service.Error(err.Error())
		log.Fatal(err)
	}
	defer db.Close()
	service.Info("Connected")
	service.Db = db

	// var wait time.Duration
	// flag.DurationVar(&wait, "graceful-timeout", time.Second*15, "the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m")
	wait := time.Second * 15
	r := mux.NewRouter()
	postRouter := r.Methods("POST").Subrouter()
	postRouter.Use(loggingMiddleWare(service))
	postRouter.Use(authorizationMiddleWare(service))
	// getRouter := r.Methods("GET").Subrouter()

	postRouter.HandleFunc("/headcount", service.PostProjectedHeadcount)
	postRouter.HandleFunc("/skills", service.PostSkillsDevelopment)
	postRouter.HandleFunc("/business_value", service.PostBusinessValue)
	postRouter.HandleFunc("/availability", service.PostAvailability)
	postRouter.HandleFunc("/role_strategy", service.PostRoleStrategy)
	postRouter.HandleFunc("/market_salaries", service.PostMarketSalaries)

	r.PathPrefix("/docs").Handler(httpSwagger.WrapHandler)

	srv := &http.Server{
		Addr: "0.0.0.0:5000",
		// Good practice to set timeouts to avoid Slowloris attacks.
		WriteTimeout: time.Second * 60,
		ReadTimeout:  time.Second * 10,
		IdleTimeout:  time.Second * 60,
		Handler:      r,
	}
	service.Info("Serving..")
	// Run our server in a goroutine so that it doesn't block.
	go func() {
		if err := srv.ListenAndServe(); err != nil {
			log.Fatal(err)
		}
	}()
	service.Info("for docs go to http://localhost:5000/docs/index.html")

	c := make(chan os.Signal, 1)
	// We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
	// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.
	signal.Notify(c, os.Interrupt)
	// Block until we receive our signal.
	<-c

	// Create a deadline to wait for.
	ctx, cancel := context.WithTimeout(context.Background(), wait)
	defer cancel()
	// Doesn't block if no connections, but will otherwise wait
	// until the timeout deadline.
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal(err)
	}
	// Optionally, you could run srv.Shutdown in a goroutine and block on
	// <-ctx.Done() if your application should wait for other services
	// to finalize based on context cancellation.
	service.Info("Shutting down")
	os.Exit(0)
}
